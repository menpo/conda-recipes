--- opencv_contrib-3.0.0\modules\line_descriptor\src\binary_descriptor.cpp
+++ opencv_contrib-3.0.0\modules\line_descriptor\src\binary_descriptor.cpp
@@ -50,6 +50,7 @@
 #define LeftDir     4
 #define TryTime     6
 #define SkipEdgePoint 2
+#define round(x) (x >= 0.0) ? floor(x + 0.5) : ceil(x - 0.5)
 
 //using namespace cv;
 namespace cv
@@ -640,7 +641,7 @@
         uchar* pointerToRow = descriptors.ptr( originalIndex );
 
         /* get LBD data */
-        float* desVec = sl[k][lineC].descriptor.data();
+        float* desVec = &sl[k][lineC].descriptor.front();
 
         /* fill current row with binary descriptor */
         for ( int comb = 0; comb < 32; comb++ )
@@ -679,7 +680,7 @@
   /* sigma values and reduction factor used in Gaussian pyramids */
   float preSigma2 = 0;  //orignal image is not blurred, has zero sigma;
   float curSigma2 = 1.0;  //[sqrt(2)]^0=1;
-  double factor = sqrt( 2 );  //the down sample factor between connective two octave images
+  double factor = sqrt( 2.0 );  //the down sample factor between connective two octave images
 
   /* loop over number of octaves */
   for ( int octaveCount = 0; octaveCount < params.numOfOctave_; octaveCount++ )
@@ -1228,7 +1229,7 @@
 
       /* construct line descriptor */
       pSingleLine->descriptor.resize( descriptor_size );
-      desVec = pSingleLine->descriptor.data();
+      desVec = &pSingleLine->descriptor.front();
 
       short desID;
 
@@ -1267,7 +1268,7 @@
       float tempM, tempS;
       tempM = 0;
       tempS = 0;
-      desVec = pSingleLine->descriptor.data();
+      desVec = &pSingleLine->descriptor.front();
 
       int base = 0;
       for ( short i = 0; i < (short) ( NUM_OF_BANDS * 8 ); ++base, i = (short) ( base * 8 ) )
@@ -1284,7 +1285,7 @@
 
       tempM = 1 / sqrt( tempM );
       tempS = 1 / sqrt( tempS );
-      desVec = pSingleLine->descriptor.data();
+      desVec = &pSingleLine->descriptor.front();
       base = 0;
       for ( short i = 0; i < (short) ( NUM_OF_BANDS * 8 ); ++base, i = (short) ( base * 8 ) )
       {
@@ -1302,7 +1303,7 @@
        * a threshold is used to limit the value of element in the unit feature
        * vector no larger than this threshold. In Z.Wang's work, a value of 0.4 is found
        * empirically to be a proper threshold.*/
-      desVec = pSingleLine->descriptor.data();
+      desVec = &pSingleLine->descriptor.front();
       for ( short i = 0; i < descriptor_size; i++ )
       {
         if( desVec[i] > 0.4 )
@@ -1331,7 +1332,7 @@
     for ( int g = 0; g < 32; g++ )
     {
       /* get LBD data */
-      float* des_Vec = keyLines[lineIDInScaleVec][0].descriptor.data();
+      float* des_Vec = &keyLines[lineIDInScaleVec][0].descriptor.front();
       *pointerToRow = des_Vec[g];
       pointerToRow++;
 
@@ -2191,9 +2192,9 @@
   edgeChains.xCors.resize( offsetPFirst + offsetPSecond );
   edgeChains.yCors.resize( offsetPFirst + offsetPSecond );
   edgeChains.sId.resize( offsetPS + 1 );
-  unsigned int *pxCors = edgeChains.xCors.data();
-  unsigned int *pyCors = edgeChains.yCors.data();
-  unsigned int *psId = edgeChains.sId.data();
+  unsigned int *pxCors = &edgeChains.xCors.front();
+  unsigned int *pyCors = &edgeChains.yCors.front();
+  unsigned int *psId = &edgeChains.sId.front();
   offsetPFirst = 0;
   offsetPSecond = 0;
   unsigned int indexInCors = 0;
@@ -2239,12 +2240,12 @@
   lines.xCors.resize( linePixelID );
   lines.yCors.resize( linePixelID );
   lines.sId.resize( 5 * edges.numOfEdges );
-  unsigned int *pEdgeXCors = edges.xCors.data();
-  unsigned int *pEdgeYCors = edges.yCors.data();
-  unsigned int *pEdgeSID = edges.sId.data();
-  unsigned int *pLineXCors = lines.xCors.data();
-  unsigned int *pLineYCors = lines.yCors.data();
-  unsigned int *pLineSID = lines.sId.data();
+  unsigned int *pEdgeXCors = &edges.xCors.front();
+  unsigned int *pEdgeYCors = &edges.yCors.front();
+  unsigned int *pEdgeSID = &edges.sId.front();
+  unsigned int *pLineXCors = &lines.xCors.front();
+  unsigned int *pLineYCors = &lines.yCors.front();
+  unsigned int *pLineSID = &lines.sId.front();
   logNT_ = 2.0 * ( log10( (double) imageWidth ) + log10( (double) imageHeight ) );
   double lineFitErr = 0;    //the line fit error;
   std::vector<double> lineEquation( 2, 0 );
@@ -2719,9 +2720,9 @@
   lineSalience_.resize( lines_.numOfLines );
   unsigned char *pgImg = gImgWO_.ptr();
   unsigned int indexInLineArray;
-  unsigned int *pXCor = lines_.xCors.data();
-  unsigned int *pYCor = lines_.yCors.data();
-  unsigned int *pSID = lines_.sId.data();
+  unsigned int *pXCor = &lines_.xCors.front();
+  unsigned int *pYCor = &lines_.yCors.front();
+  unsigned int *pSID = &lines_.sId.front();
   for ( unsigned int i = 0; i < lineSalience_.size(); i++ )
   {
     int salience = 0;
